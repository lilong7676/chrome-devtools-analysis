{"version":3,"file":"JavaScriptREPL.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/object_ui/JavaScriptREPL.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../../../core/platform/platform.js';\nimport * as SDK from '../../../../core/sdk/sdk.js';\nimport * as UI from '../../legacy.js';\n\nimport {RemoteObjectPreviewFormatter} from './RemoteObjectPreviewFormatter.js';\n\nexport class JavaScriptREPL {\n  static wrapObjectLiteral(code: string): string {\n    // Only parenthesize what appears to be an object literal.\n    const result = /^\\s*\\{\\s*(.*)\\s*\\}[\\s;]*$/.exec(code);\n    if (result === null) {\n      return code;\n    }\n    const [, body] = result;\n    let level = 0;\n    for (const c of body) {\n      if (c === '{') {\n        level++;\n      } else if (c === '}' && --level < 0) {\n        return code;\n      }\n    }\n\n    const parse = (async(): Promise<number> => 0).constructor;\n    try {\n      // Check if the body can be interpreted as an expression.\n      parse('return {' + body + '};');\n\n      // No syntax error! Does it work parenthesized?\n      const wrappedCode = '({' + body + '})';\n      parse(wrappedCode);\n\n      return wrappedCode;\n    } catch (e) {\n      return code;\n    }\n  }\n\n  static async evaluateAndBuildPreview(\n      text: string, throwOnSideEffect: boolean, replMode: boolean, timeout?: number, allowErrors?: boolean,\n      objectGroup?: string, awaitPromise: boolean = false, silent: boolean = false): Promise<{\n    preview: DocumentFragment,\n    result: SDK.RuntimeModel.EvaluationResult|null,\n  }> {\n    const executionContext = UI.Context.Context.instance().flavor(SDK.RuntimeModel.ExecutionContext);\n    const isTextLong = text.length > maxLengthForEvaluation;\n    if (!text || !executionContext || (throwOnSideEffect && isTextLong)) {\n      return {preview: document.createDocumentFragment(), result: null};\n    }\n\n    const expression = JavaScriptREPL.wrapObjectLiteral(text);\n    const options = {\n      expression: expression,\n      generatePreview: true,\n      includeCommandLineAPI: true,\n      throwOnSideEffect: throwOnSideEffect,\n      timeout: timeout,\n      objectGroup: objectGroup,\n      disableBreaks: true,\n      replMode: replMode,\n      silent: silent,\n      returnByValue: undefined,\n      allowUnsafeEvalBlockedByCSP: undefined,\n    };\n    const result = await executionContext.evaluate(options, false /* userGesture */, awaitPromise);\n    const preview = JavaScriptREPL.buildEvaluationPreview(result, allowErrors);\n    return {preview, result};\n  }\n\n  private static buildEvaluationPreview(result: SDK.RuntimeModel.EvaluationResult, allowErrors?: boolean):\n      DocumentFragment {\n    const fragment = document.createDocumentFragment();\n    if ('error' in result) {\n      return fragment;\n    }\n\n    if (result.exceptionDetails && result.exceptionDetails.exception && result.exceptionDetails.exception.description) {\n      const exception = result.exceptionDetails.exception.description;\n      if (exception.startsWith('TypeError: ') || allowErrors) {\n        fragment.createChild('span').textContent = result.exceptionDetails.text + ' ' + exception;\n      }\n      return fragment;\n    }\n\n    const formatter = new RemoteObjectPreviewFormatter();\n    const {preview, type, subtype, className, description} = result.object;\n    if (preview && type === 'object' && subtype !== 'node' && subtype !== 'trustedtype') {\n      formatter.appendObjectPreview(fragment, preview, false /* isEntry */);\n    } else {\n      const nonObjectPreview = formatter.renderPropertyPreview(\n          type, subtype, className, Platform.StringUtilities.trimEndWithMaxLength(description || '', 400));\n      fragment.appendChild(nonObjectPreview);\n    }\n    return fragment;\n  }\n}\n\nlet maxLengthForEvaluation: number = 2000;\n\nexport function setMaxLengthForEvaluation(value: number): void {\n  maxLengthForEvaluation = value;\n}\n\nexport function getMaxLengthForEvaluation(): number {\n  return maxLengthForEvaluation;\n}\n"]}