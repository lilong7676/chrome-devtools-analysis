{"version":3,"file":"ColorSwatch.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/inline_editor/ColorSwatch.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as ComponentHelpers from '../../../components/helpers/helpers.js';\nimport * as LitHtml from '../../../lit-html/lit-html.js';\n\nimport colorSwatchStyles from './colorSwatch.css.js';\n\nconst UIStrings = {\n  /**\n   *@description Icon element title in Color Swatch of the inline editor in the Styles tab\n   */\n  shiftclickToChangeColorFormat: 'Shift-click to change color format',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/components/inline_editor/ColorSwatch.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class ColorChangedEvent extends Event {\n  static readonly eventName = 'colorchanged';\n\n  data: {text: string};\n\n  constructor(text: string) {\n    super(ColorChangedEvent.eventName, {});\n    this.data = {text};\n  }\n}\n\nexport class ClickEvent extends Event {\n  static readonly eventName = 'swatchclick';\n\n  constructor() {\n    super(ClickEvent.eventName, {});\n  }\n}\n\nexport class ColorSwatch extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-color-swatch`;\n  private readonly shadow = this.attachShadow({mode: 'open'});\n  private tooltip: string = i18nString(UIStrings.shiftclickToChangeColorFormat);\n  private text: string|null = null;\n  private color: Common.Color.Color|null = null;\n  private format: Common.Color.Format|null = null;\n\n  constructor() {\n    super();\n    this.shadow.adoptedStyleSheets = [\n      colorSwatchStyles,\n    ];\n  }\n\n  static isColorSwatch(element: Element): element is ColorSwatch {\n    return element.localName === 'devtools-color-swatch';\n  }\n\n  getColor(): Common.Color.Color|null {\n    return this.color;\n  }\n\n  getFormat(): Common.Color.Format|null {\n    return this.format;\n  }\n\n  getText(): string|null {\n    return this.text;\n  }\n\n  get anchorBox(): AnchorBox|null {\n    const swatch = this.shadow.querySelector('.color-swatch');\n    return swatch ? swatch.boxInWindow() : null;\n  }\n\n  /**\n   * Render this swatch given a color object or text to be parsed as a color.\n   * @param color The color object or string to use for this swatch.\n   * @param formatOrUseUserSetting Either the format to be used as a string, or true to auto-detect the user-set format.\n   * @param tooltip The tooltip to use on the swatch.\n   */\n  renderColor(color: Common.Color.Color|string, formatOrUseUserSetting?: string|boolean, tooltip?: string): void {\n    if (typeof color === 'string') {\n      this.color = Common.Color.parse(color);\n      this.text = color;\n      if (!this.color) {\n        this.renderTextOnly();\n        return;\n      }\n    } else {\n      this.color = color;\n    }\n\n    if (typeof formatOrUseUserSetting === 'boolean' && formatOrUseUserSetting) {\n      this.format = Common.Settings.detectColorFormat(this.color);\n    } else if (typeof formatOrUseUserSetting === 'string') {\n      this.format = Common.Color.getFormat(formatOrUseUserSetting);\n    } else {\n      this.format = this.color.format();\n    }\n\n    this.text = this.color.asString(this.format ?? undefined);\n\n    if (tooltip) {\n      this.tooltip = tooltip;\n    }\n\n    if (!(this.color instanceof Common.Color.Legacy)) {\n      this.renderCircularColorSwatch();\n    } else {\n      this.render();\n    }\n  }\n\n  private renderTextOnly(): void {\n    // Non-color values can be passed to the component (like 'none' from border style).\n    LitHtml.render(this.text, this.shadow, {host: this});\n  }\n\n  private renderCircularColorSwatch(): void {\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    // Note that we use a <slot> with a default value here to display the color text. Consumers of this component are\n    // free to append any content to replace what is being shown here.\n    // Note also that whitespace between nodes is removed on purpose to avoid pushing these elements apart. Do not\n    // re-format the HTML code.\n    LitHtml.render(\n      LitHtml.html`<span class=\"color-swatch circular read-only\">\n          <span class=\"color-swatch-inner circular\"\n          style=\"background-color: ${this.text};\"\n          @click=${this.consume}\n          @mousedown=${this.consume}\n          @dblclick=${this.consume}></span>\n        </span><slot><span>${this.text}</span></slot>`,\n      this.shadow, {host: this});\n    // clang-format on\n  }\n\n  private render(): void {\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n\n    // Note that we use a <slot> with a default value here to display the color text. Consumers of this component are\n    // free to append any content to replace what is being shown here.\n    // Note also that whitespace between nodes is removed on purpose to avoid pushing these elements apart. Do not\n    // re-format the HTML code.\n    LitHtml.render(\n      LitHtml.html`<span class=\"color-swatch\" title=${this.tooltip}><span class=\"color-swatch-inner\"\n        style=\"background-color: ${this.text};\"\n        @click=${this.onClick}\n        @mousedown=${this.consume}\n        @dblclick=${this.consume}></span></span><slot><span>${this.text}</span></slot>`,\n      this.shadow, {host: this});\n    // clang-format on\n  }\n\n  private onClick(e: KeyboardEvent): void {\n    e.stopPropagation();\n\n    if (e.shiftKey) {\n      this.toggleNextFormat();\n      return;\n    }\n\n    this.dispatchEvent(new ClickEvent());\n  }\n\n  private consume(e: Event): void {\n    e.stopPropagation();\n  }\n\n  private toggleNextFormat(): void {\n    if (!this.color || !this.format) {\n      return;\n    }\n\n    let currentValue;\n    do {\n      this.format = nextColorFormat(this.color.asLegacyColor(), this.format);\n      currentValue = this.color.asString(this.format);\n    } while (currentValue === this.text);\n\n    if (currentValue) {\n      this.text = currentValue;\n      this.render();\n\n      this.dispatchEvent(new ColorChangedEvent(this.text));\n    }\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-color-swatch', ColorSwatch);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-color-swatch': ColorSwatch;\n  }\n\n  interface HTMLElementEventMap {\n    [ColorChangedEvent.eventName]: ColorChangedEvent;\n    [ClickEvent.eventName]: Event;\n  }\n}\n\nfunction nextColorFormat(color: Common.Color.Legacy, curFormat: Common.Color.Format): Common.Color.Format {\n  // The format loop is as follows:\n  // * original\n  // * rgb(a)\n  // * hsl(a)\n  // * hwb(a)\n  // * nickname (if the color has a nickname)\n  // * shorthex (if has short hex)\n  // * hex\n  switch (curFormat) {\n    case Common.Color.Format.RGB:\n    case Common.Color.Format.RGBA:\n      return !color.hasAlpha() ? Common.Color.Format.HSL : Common.Color.Format.HSLA;\n\n    case Common.Color.Format.HSL:\n    case Common.Color.Format.HSLA:\n      return !color.hasAlpha() ? Common.Color.Format.HWB : Common.Color.Format.HWBA;\n\n    case Common.Color.Format.HWB:\n    case Common.Color.Format.HWBA:\n      if (color.nickname()) {\n        return Common.Color.Format.Nickname;\n      }\n      return color.detectHEXFormat();\n\n    case Common.Color.Format.ShortHEX:\n      return Common.Color.Format.HEX;\n\n    case Common.Color.Format.ShortHEXA:\n      return Common.Color.Format.HEXA;\n\n    case Common.Color.Format.Nickname:\n      return color.detectHEXFormat();\n\n    default:\n      return Common.Color.Format.RGBA;\n  }\n}\n"]}