{"version":3,"file":"ApplicationPanelPreloadingSection.js","sourceRoot":"","sources":["../../../../../../front_end/panels/application/ApplicationPanelPreloadingSection.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAChD,OAAO,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAIhD,OAAO,EAAC,2BAA2B,EAAC,MAAM,kCAAkC,CAAC;AAG7E,OAAO,EAAC,cAAc,EAAC,MAAM,gCAAgC,CAAC;AAE9D,MAAM,SAAS,GAAG;IAChB;;OAEG;IACH,0BAA0B,EAAE,4BAA4B;CACzD,CAAC;AACF,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,yDAAyD,EAAE,SAAS,CAAC,CAAC;AAC/G,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAEtE,MAAM,OAAO,qBAAsB,SAAQ,2BAA2B;IAC5D,KAAK,CAA2C;IAChD,IAAI,CAAkB;IAE9B,YAAY,cAA8B;QACxC,KAAK,CAAC,cAAc,EAAE,UAAU,CAAC,SAAS,CAAC,0BAA0B,CAAC,EAAE,KAAK,CAAC,CAAC;QAE/E,MAAM,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE,oBAAoB,CAAC,CAAC;QAC3E,IAAI,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QAE7B,4CAA4C;IAC9C,CAAC;IAED,IAAI,OAAO;QACT,OAAO,eAAkD,CAAC;IAC5D,CAAC;IAED,UAAU,CAAC,KAA8C;QACvD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED,QAAQ,CAAC,cAAwB;QAC/B,KAAK,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;QAE/B,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACf,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACd,IAAI,CAAC,IAAI,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC5C;QAED,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzB,wEAAwE;QAExE,OAAO,KAAK,CAAC;IACf,CAAC;CACF","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport type * as Platform from '../../core/platform/platform.js';\n\nimport {ApplicationPanelTreeElement} from './ApplicationPanelTreeElement.js';\nimport {type ResourcesPanel} from './ResourcesPanel.js';\n\nimport {PreloadingView} from './preloading/PreloadingView.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Application Panel Sidebar of the Application panel\n   */\n  prefetchingAndPrerendering: 'Prefetching & Prerendering',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/ApplicationPanelPreloadingSection.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class PreloadingTreeElement extends ApplicationPanelTreeElement {\n  private model?: SDK.PrerenderingModel.PrerenderingModel;\n  private view?: PreloadingView;\n\n  constructor(resourcesPanel: ResourcesPanel) {\n    super(resourcesPanel, i18nString(UIStrings.prefetchingAndPrerendering), false);\n\n    const icon = UI.Icon.Icon.create('mediumicon-fetch', 'resource-tree-item');\n    this.setLeadingIcons([icon]);\n\n    // TODO(https://crbug.com/1384419): Set link\n  }\n\n  get itemURL(): Platform.DevToolsPath.UrlString {\n    return 'preloading://' as Platform.DevToolsPath.UrlString;\n  }\n\n  initialize(model: SDK.PrerenderingModel.PrerenderingModel): void {\n    this.model = model;\n  }\n\n  onselect(selectedByUser?: boolean): boolean {\n    super.onselect(selectedByUser);\n\n    if (!this.model) {\n      return false;\n    }\n\n    if (!this.view) {\n      this.view = new PreloadingView(this.model);\n    }\n\n    this.showView(this.view);\n    // TODO(https://crbug.com/1384419): Report metrics when the panel shown.\n\n    return false;\n  }\n}\n"]}