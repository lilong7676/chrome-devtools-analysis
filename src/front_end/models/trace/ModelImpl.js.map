{"version":3,"file":"ModelImpl.js","sourceRoot":"","sources":["../../../../../../front_end/models/trace/ModelImpl.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\n\nimport * as Handlers from './handlers/handlers.js';\nimport * as Helpers from './helpers/helpers.js';\nimport {TraceProcessor} from './TraceProcessor.js';\n\nimport type * as Types from './types/types.js';\n\n// Note: this model is implemented in a way that can support multiple trace\n// processors. Currently there is only one implemented, but you will see\n// references to \"processors\" plural because it can easily be extended in the future.\n\nexport class Model extends EventTarget {\n  readonly #traceProcessor = new TraceProcessor(Handlers.ModelHandlers);\n  readonly #traces: ParsedTraceFile[] = [];\n  readonly #nextNumberByDomain = new Map<string, number>();\n\n  readonly #recordingsAvailable: string[] = [];\n  #lastRecordingIndex = 0;\n\n  async parse(\n      traceEvents: readonly Types.TraceEvents.TraceEventData[], metadata: TraceFileMetaData = {},\n      freshRecording = false): Promise<void> {\n    // During parsing, periodically update any listeners on each processors'\n    // progress (if they have any updates).\n    const onTraceUpdate = (event: Event): void => {\n      const {data} = event as TraceParseEvent;\n      this.dispatchEvent(new ModelUpdateEvent({type: ModelUpdateType.TRACE, data: data}));\n    };\n\n    this.#traceProcessor.addEventListener(TraceParseEvent.eventName, onTraceUpdate);\n\n    // Create a parsed trace file, populating it in parallel as each processor\n    // finishes its parsing process.\n\n    const file: ParsedTraceFile = {\n      traceEvents,\n      metadata,\n      traceParsedData: null,\n    };\n\n    // When processors have finished parsing, store the parsed data so that it\n    // is available to call sites notified by each respective 'done' update.\n\n    const traceProcessing = async(): Promise<void> => {\n      await this.#traceProcessor.parse(traceEvents, freshRecording);\n      file.traceParsedData = this.#traceProcessor.data;\n      this.#lastRecordingIndex++;\n      let recordingName = `Trace ${this.#lastRecordingIndex}`;\n      let origin: string|null = null;\n      if (file.traceParsedData) {\n        origin = Helpers.Trace.extractOriginFromTrace(file.traceParsedData.Meta.mainFrameURL);\n        if (origin) {\n          const nextSequenceForDomain = Platform.MapUtilities.getWithDefault(this.#nextNumberByDomain, origin, () => 1);\n          recordingName = `${origin} (${nextSequenceForDomain})`;\n          this.#nextNumberByDomain.set(origin, nextSequenceForDomain + 1);\n        }\n      }\n      this.#recordingsAvailable.push(recordingName);\n      this.dispatchEvent(new ModelUpdateEvent({type: ModelUpdateType.TRACE, data: 'done'}));\n    };\n\n    try {\n      // Wait for all outstanding promises before finishing the async execution,\n      // but perform all tasks in parallel.\n      await traceProcessing();\n      // We only push the file onto this.#traces here once we know it's valid\n      // and there's been no errors in the parsing.\n      this.#traces.push(file);\n    } catch (e) {\n      throw e;\n    } finally {\n      // All processors have finished parsing, no more updates are expected.\n      // Finally, update any listeners that all processors are 'done'.\n      this.#traceProcessor.removeEventListener(TraceParseEvent.eventName, onTraceUpdate);\n      this.dispatchEvent(new ModelUpdateEvent({type: ModelUpdateType.GLOBAL, data: 'done'}));\n    }\n  }\n\n  traceParsedData(index: number): Handlers.Types.TraceParseData|null {\n    if (!this.#traces[index]) {\n      return null;\n    }\n\n    return this.#traces[index].traceParsedData;\n  }\n\n  metadata(index: number): TraceFileMetaData|null {\n    if (!this.#traces[index]) {\n      return null;\n    }\n\n    return this.#traces[index].metadata;\n  }\n\n  traceEvents(index: number): readonly Types.TraceEvents.TraceEventData[]|null {\n    if (!this.#traces[index]) {\n      return null;\n    }\n\n    return this.#traces[index].traceEvents;\n  }\n\n  size(): number {\n    return this.#traces.length;\n  }\n\n  deleteTraceByIndex(recordingIndex: number): void {\n    this.#traces.splice(recordingIndex, 1);\n    this.#recordingsAvailable.splice(recordingIndex, 1);\n  }\n\n  getRecordingsAvailable(): string[] {\n    return this.#recordingsAvailable;\n  }\n\n  reset(): void {\n    this.#traceProcessor.reset();\n  }\n}\n\n/**\n * This parsed trace file is used by the Model. It keeps multiple instances\n * of these so that the user can swap between them. The key is that it is\n * essentially the TraceFile plus whatever the model has parsed from it.\n */\nexport type ParsedTraceFile = TraceFile&{\n  traceParsedData: Handlers.Types.TraceParseData | null,\n};\n\nexport const enum ModelUpdateType {\n  GLOBAL = 0,\n  TRACE = 1,\n  LIGHTHOUSE = 2,\n}\n\nexport type ModelUpdateEventData = ModelUpdateEventGlobalData|ModelUpdateEventTraceData|ModelUpdateEventLighthouseData;\n\nexport type ModelUpdateEventGlobalData = {\n  type: ModelUpdateType.GLOBAL,\n  data: GlobalParseEventData,\n};\n\nexport type ModelUpdateEventTraceData = {\n  type: ModelUpdateType.TRACE,\n  data: TraceParseEventData,\n};\n\nexport type ModelUpdateEventLighthouseData = {\n  type: ModelUpdateType.LIGHTHOUSE,\n  data: LighthouseParseEventData,\n};\n\nexport type GlobalParseEventData = 'done';\nexport type TraceParseEventData = TraceParseEventProgressData|'done';\nexport type LighthouseParseEventData = 'done';\n\nexport type TraceParseEventProgressData = {\n  index: number,\n  total: number,\n};\n\nexport class ModelUpdateEvent extends Event {\n  static readonly eventName = 'modelupdate';\n  constructor(public data: ModelUpdateEventData) {\n    super(ModelUpdateEvent.eventName);\n  }\n}\n\nexport function isModelUpdateEventDataGlobal(object: ModelUpdateEventData): object is ModelUpdateEventGlobalData {\n  return object.type === ModelUpdateType.GLOBAL;\n}\n\nexport function isModelUpdateEventDataTrace(object: ModelUpdateEventData): object is ModelUpdateEventTraceData {\n  return object.type === ModelUpdateType.TRACE;\n}\n\nexport class TraceParseEvent extends Event {\n  static readonly eventName = 'traceparse';\n  constructor(public data: TraceParseEventData, init: EventInit = {bubbles: true}) {\n    super(TraceParseEvent.eventName, init);\n  }\n}\n\nexport type TraceFile = {\n  traceEvents: readonly Types.TraceEvents.TraceEventData[],\n  metadata: TraceFileMetaData,\n};\n\n/**\n * Trace metadata that we persist to the file. This will allow us to\n * store specifics for the trace, e.g., which tracks should be visible\n * on load.\n */\nexport interface TraceFileMetaData {\n  source?: 'DevTools';\n  networkThrottling?: string;\n  cpuThrottling?: number;\n}\n\nexport type TraceFileContents = TraceFile|Types.TraceEvents.TraceEventData[];\n\ndeclare global {\n  interface HTMLElementEventMap {\n    [TraceParseEvent.eventName]: TraceParseEvent;\n  }\n}\n"]}