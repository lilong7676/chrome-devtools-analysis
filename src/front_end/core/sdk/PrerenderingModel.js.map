{"version":3,"file":"PrerenderingModel.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/PrerenderingModel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Protocol from '../../generated/protocol.js';\nimport type * as Common from '../common/common.js';\n\nimport type * as Platform from '../platform/platform.js';\n\nimport * as ChildTargetManager from './ChildTargetManager.js';\nimport * as ResourceTreeModel from './ResourceTreeModel.js';\nimport * as SDKModel from './SDKModel.js';\nimport * as Target from './Target.js';\nimport * as TargetManager from './TargetManager.js';\n\n// Holds prerendering information of given target.\n//\n// Note: In first implementation of Preloading Status Panel, we utilize\n// TargetInfo to detect beginning of prerendering. See the discussion in\n// https://chromium-review.googlesource.com/c/chromium/src/+/3875947/comment/595dd0d3_bb2cb92f/\nexport class PrerenderingModel extends SDKModel.SDKModel<EventTypes> implements\n    TargetManager.SDKModelObserver<ResourceTreeModel.ResourceTreeModel> {\n  private registry: PrerenderingRegistry = new PrerenderingRegistry();\n\n  constructor(target: Target.Target) {\n    super(target);\n\n    TargetManager.TargetManager.instance().addModelListener(\n        ChildTargetManager.ChildTargetManager, ChildTargetManager.Events.TargetInfoChanged, this.onTargetInfoChanged,\n        this);\n    TargetManager.TargetManager.instance().observeModels(ResourceTreeModel.ResourceTreeModel, this);\n  }\n\n  dispose(): void {\n    super.dispose();\n\n    TargetManager.TargetManager.instance().removeModelListener(\n        ChildTargetManager.ChildTargetManager, ChildTargetManager.Events.TargetInfoChanged, this.onTargetInfoChanged,\n        this);\n    TargetManager.TargetManager.instance().unobserveModels(ResourceTreeModel.ResourceTreeModel, this);\n  }\n\n  // Returns reference. Don't save returned values.\n  getById(id: PreloadingId): PrerenderingAttempt|null {\n    return this.registry.getById(id);\n  }\n\n  // Returns array of pairs of id and reference. Don't save returned references.\n  getAll(): PrerenderingAttemptWithId[] {\n    return this.registry.getAll();\n  }\n\n  clearNotOngoing(): void {\n    this.registry.clearNotOngoing();\n    this.dispatchPrerenderingAttemptsRemoved();\n  }\n\n  private dispatchPrerenderingAttemptStarted(): void {\n    this.dispatchEventToListeners(Events.PrerenderingAttemptStarted);\n  }\n\n  private dispatchPrerenderingAttemptUpdated(): void {\n    this.dispatchEventToListeners(Events.PrerenderingAttemptUpdated);\n  }\n\n  private dispatchPrerenderingAttemptsRemoved(): void {\n    this.dispatchEventToListeners(Events.PrerenderingAttemptsRemoved);\n  }\n\n  private onTargetInfoChanged(event: Common.EventTarget.EventTargetEvent<Protocol.Target.TargetInfo>): void {\n    const targetInfo = event.data;\n\n    if (targetInfo.subtype !== 'prerender') {\n      return;\n    }\n\n    // Ad-hoc filtering. Ignore the active page.\n    if (targetInfo.url === '') {\n      return;\n    }\n\n    // Non trivial assumption\n    //\n    // We assume that targetId is the same to frameId for targetInfo\n    // with subtype === 'prerender'.\n    const frameId = (targetInfo.targetId as string) as Protocol.Page.FrameId;\n\n    this.registry.maybeAddOpaquePrerendering(frameId, targetInfo.url as Platform.DevToolsPath.UrlString);\n\n    this.dispatchPrerenderingAttemptStarted();\n  }\n\n  // implements TargetManager.SDKModelObserver<ResourceTreeModel.ResourceTreeModel>\n  modelAdded(model: ResourceTreeModel.ResourceTreeModel): void {\n    model.addEventListener(ResourceTreeModel.Events.PrerenderAttemptCompleted, this.onPrerenderAttemptCompleted, this);\n  }\n\n  // implements TargetManager.SDKModelObserver<ResourceTreeModel.ResourceTreeModel>\n  modelRemoved(model: ResourceTreeModel.ResourceTreeModel): void {\n    model.removeEventListener(\n        ResourceTreeModel.Events.PrerenderAttemptCompleted, this.onPrerenderAttemptCompleted, this);\n  }\n\n  private onPrerenderAttemptCompleted(\n      event: Common.EventTarget.EventTargetEvent<Protocol.Page.PrerenderAttemptCompletedEvent>): void {\n    const inner = event.data;\n\n    this.registry.updateOpaquePrerenderingAttempt(inner);\n\n    this.dispatchPrerenderingAttemptUpdated();\n  }\n}\n\nSDKModel.SDKModel.register(PrerenderingModel, {capabilities: Target.Capability.Target, autostart: false});\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  PrerenderingAttemptStarted = 'PrerenderingAttemptStarted',\n  PrerenderingAttemptUpdated = 'PrerenderingAttemptUpdated',\n  PrerenderingAttemptsRemoved = 'PrerenderingAttemtsRemoved',\n}\n\nexport type EventTypes = {\n  [Events.PrerenderingAttemptStarted]: void,\n  [Events.PrerenderingAttemptUpdated]: void,\n  [Events.PrerenderingAttemptsRemoved]: void,\n};\n\n// Id for preloading events and prerendering attempt.\nexport type PreloadingId = string;\n\nexport type PrerenderingAttemptId = string;\n\nexport interface PrerenderingAttempt {\n  prerenderingAttemptId: PrerenderingAttemptId;\n  startedAt: number;\n  trigger: PrerenderingTrigger;\n  url: Platform.DevToolsPath.UrlString;\n  status: PrerenderingStatus;\n  discardedReason?: Protocol.Page.PrerenderFinalStatus|null|'Unknown';\n}\n\ntype PrerenderingTrigger =\n    PrerenderingTriggerSpecRules|PrerenderingTriggerDUI|PrerenderingTriggerDSE|PrerenderingTriggerOpaque;\n\ninterface PrerenderingTriggerSpecRules {\n  kind: 'PrerenderingTriggerSpecRules';\n  rule: object;\n}\n\ninterface PrerenderingTriggerDUI {\n  kind: 'PrerenderingTriggerDUI';\n}\n\ninterface PrerenderingTriggerDSE {\n  kind: 'PrerenderingTriggerDSE';\n}\n\ninterface PrerenderingTriggerOpaque {\n  kind: 'PrerenderingTriggerOpaque';\n}\n\nexport const enum PrerenderingStatus {\n  Prerendering = 'Prerendering',\n  Activated = 'Activated',\n  Discarded = 'Discarded',\n}\n\nexport type PrerenderingAttemptEvent = PrerenderingAttemptEventAdd|PrerenderingAttemptEventUpdate;\n\nexport interface PrerenderingAttemptEventAdd {\n  kind: 'PrerenderingAttemptEventAdd';\n  attempt: PrerenderingAttempt;\n}\n\nexport interface PrerenderingAttemptEventUpdate {\n  kind: 'PrerenderingAttemptEventUpdate';\n  update: PrerenderingAttempt;\n}\n\nexport interface PrerenderingAttemptWithId {\n  id: PreloadingId;\n  attempt: PrerenderingAttempt;\n}\n\n// export only for testing.\nexport class PrerenderingRegistry {\n  private entities: Map<PreloadingId, PrerenderingAttempt> = new Map<PreloadingId, PrerenderingAttempt>();\n  // Currently, PrerenderAttemptCompleted event doesn't have information\n  // to identify corresponding attempt. To mitigate this, we utilize the\n  // fact that attempts are activated/cancelled if navigated out. So,\n  // in many cases, we can identify an ongoing attempt by URL.\n  private opaqueUrlToPreId: Map<Platform.DevToolsPath.UrlString, PreloadingId> =\n      new Map<Platform.DevToolsPath.UrlString, PreloadingId>();\n\n  // Returns reference. Don't save returned values.\n  getById(id: PreloadingId): PrerenderingAttempt|null {\n    return this.entities.get(id) || null;\n  }\n\n  // Returns array of pairs of id and reference. Don't save returned references.\n  getAll(): PrerenderingAttemptWithId[] {\n    return Array.from(this.entities.entries()).map(([id, attempt]) => ({id, attempt}));\n  }\n\n  private makePreloadingId(x: PrerenderingAttempt): PreloadingId {\n    if (x.trigger.kind === 'PrerenderingTriggerOpaque') {\n      return `PrerenderingAttempt-opaque:${x.prerenderingAttemptId}` as PreloadingId;\n    }\n    return `PrerenderingAttempt:${x.prerenderingAttemptId}` as PreloadingId;\n  }\n\n  private makePreIdOfPrerendering(frameId: Protocol.Page.FrameId): PreloadingId {\n    return `PrerenderingAttempt-opaque:${frameId}` as PreloadingId;\n  }\n\n  // TODO(https://crbug.com/1384419): Make this private.\n  processEvent(event: PrerenderingAttemptEvent): void {\n    switch (event.kind) {\n      case 'PrerenderingAttemptEventAdd': {\n        this.entities.set(this.makePreloadingId(event.attempt), event.attempt);\n        break;\n      }\n      case 'PrerenderingAttemptEventUpdate': {\n        this.entities.set(this.makePreloadingId(event.update), event.update);\n\n        const x = event.update;\n        if (x.status !== PrerenderingStatus.Prerendering) {\n          if (this.opaqueUrlToPreId.get(x.url)) {\n            this.opaqueUrlToPreId.delete(x.url);\n          }\n        }\n\n        break;\n      }\n    }\n  }\n\n  // Clear not ongoing prerendering attempts.\n  clearNotOngoing(): void {\n    for (const [id, x] of this.entities.entries()) {\n      if (x.status !== PrerenderingStatus.Prerendering) {\n        this.entities.delete(id);\n      }\n    }\n  }\n\n  // Initial support of detecting prerendering start\n  // TODO: Make CDP changes correctly.\n  maybeAddOpaquePrerendering(frameId: Protocol.Page.FrameId, url: Platform.DevToolsPath.UrlString): void {\n    // Ad-hoc filtering\n    //\n    // If a page has SpeculationRules and browser navigated out to a not\n    // related page, current Chrome throws PrerenderAttemptCompleted\n    // event and then TargetInfoChanged event. This filtering prevents\n    // adding a new prerendering attempt by the latter TargetInfoChanged.\n    if (this.entities.get(this.makePreIdOfPrerendering(frameId)) !== undefined) {\n      return;\n    }\n\n    const prerenderingAttemptId: PrerenderingAttemptId = frameId as PrerenderingAttemptId;\n    const event: PrerenderingAttemptEventAdd = {\n      kind: 'PrerenderingAttemptEventAdd',\n      attempt: {\n        prerenderingAttemptId: prerenderingAttemptId,\n        startedAt: Date.now(),\n        trigger: {\n          kind: 'PrerenderingTriggerOpaque',\n        },\n        url,\n        status: PrerenderingStatus.Prerendering,\n      },\n    };\n    this.processEvent(event);\n\n    const id = this.makePreIdOfPrerendering(frameId);\n    this.opaqueUrlToPreId.set(url, id);\n  }\n\n  updateOpaquePrerenderingAttempt(event: Protocol.Page.PrerenderAttemptCompletedEvent): void {\n    const id = this.opaqueUrlToPreId.get(event.prerenderingUrl as Platform.DevToolsPath.UrlString);\n\n    if (id === undefined) {\n      return;\n    }\n\n    const originalAttempt = this.entities.get(id);\n\n    if (originalAttempt === undefined) {\n      return;\n    }\n\n    const status = (event.finalStatus === Protocol.Page.PrerenderFinalStatus.Activated) ? PrerenderingStatus.Activated :\n                                                                                          PrerenderingStatus.Discarded;\n    const eventInternal: PrerenderingAttemptEventUpdate = {\n      kind: 'PrerenderingAttemptEventUpdate',\n      update: {\n        prerenderingAttemptId: originalAttempt.prerenderingAttemptId,\n        startedAt: originalAttempt.startedAt,\n        trigger: originalAttempt.trigger,\n        url: originalAttempt.url,\n        status: status,\n        discardedReason: this.getDiscardedReason(event),\n      },\n    };\n    this.processEvent(eventInternal);\n  }\n\n  private getDiscardedReason(event: Protocol.Page.PrerenderAttemptCompletedEvent): Protocol.Page.PrerenderFinalStatus\n      |null {\n    switch (event.finalStatus) {\n      case Protocol.Page.PrerenderFinalStatus.Activated:\n        return null;\n      case Protocol.Page.PrerenderFinalStatus.Destroyed:\n        return null;\n      default:\n        return event.finalStatus;\n    }\n  }\n}\n"]}